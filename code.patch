diff --git a/std/typecons.d b/std/typecons.d
index d7f86d17a..846b68f2b 100644
--- a/std/typecons.d
+++ b/std/typecons.d
@@ -3675,6 +3675,141 @@ struct Nullable(T)
 
     private bool _isNull = true;
 
+    /**
+     * Compares two Nullable values.
+     * - If one is null and the other is not, the null one is considered smaller.
+     * - If both are null, they are equal.
+     * - If both are non-null, compares the payloads.
+     *
+     * Returns:
+     *     Negative if `this < rhs`, zero if equal, positive if `this > rhs`.
+     */
+        int opCmp(this This, Rhs)(auto ref Rhs rhs) const
+    if (is(typeof(_value.payload < rhs.get)) && is(typeof(_value.payload > rhs.get)))
+    {
+        static if (is(Rhs == This))
+        {
+            if (_isNull)
+                return rhs._isNull ? 0 : -1;
+            else if (rhs._isNull)
+                return 1;
+            else
+                return _value.payload < rhs._value.payload ? -1 :
+                       _value.payload > rhs._value.payload ? 1 : 0;
+        }
+        else
+        {
+            static if (is(typeof(rhs.isNull)))
+            {
+                if (_isNull)
+                    return rhs.isNull ? 0 : -1;
+                else if (rhs.isNull)
+                    return 1;
+                else
+                    return _value.payload < rhs.get ? -1 :
+                           _value.payload > rhs.get ? 1 : 0;
+            }
+            else
+            {
+                return _isNull ? -1 : (_value.payload < rhs ? -1 : (_value.payload > rhs ? 1 : 0));
+            }
+        }
+    }
+
+    /// Nullable comparison tests
+    // Test 1: Basic Comparison
+    @safe unittest {
+        Nullable!int a = 5;
+        Nullable!int b = Nullable!int.init; // null
+
+        assert(a > b);
+        assert(b < a);
+        assert(a == a);
+        assert(b == b);
+    }
+
+    // Test 2: Sorting an array of Nullable
+    @safe unittest {
+        import std.algorithm : sort;
+
+        auto arr = [Nullable!int(10), Nullable!int(), Nullable!int(5), Nullable!int()];
+        sort(arr);
+
+        assert(arr[0].isNull);
+        assert(arr[1].isNull);
+        assert(arr[2].get == 5);
+        assert(arr[3].get == 10);
+    }
+
+    // Test 3: Uniqueness with Nullable values
+    @safe unittest {
+        import std.algorithm : sort, uniq;
+        import std.array : array;
+
+        auto arr = [Nullable!int(10), Nullable!int(), Nullable!int(5), Nullable!int(10), Nullable!int()];
+        sort(arr);
+        auto uniqueVals = arr.uniq.array;
+
+        assert(uniqueVals.length == 3);
+        assert(uniqueVals[0].isNull);
+        assert(uniqueVals[1].get == 5);
+        assert(uniqueVals[2].get == 10);
+    }
+
+    // Test 4: Nullable inside a struct with sorting
+    @safe unittest {
+        import std.algorithm : sort;
+
+        struct Person {
+            string name;
+            Nullable!int age;
+
+            int opCmp(const Person other) const {
+                return age.opCmp(other.age);
+            }
+        }
+
+        Person[] people = [
+            Person("Alice", Nullable!int(30)),
+            Person("Bob", Nullable!int()),
+            Person("Charlie", Nullable!int(25)),
+        ];
+
+        sort(people);
+        assert(people[0].name == "Bob");
+        assert(people[1].name == "Charlie");
+        assert(people[2].name == "Alice");
+    }
+
+    // Test 5: Nullable with custom type
+    @safe unittest {
+        import std.algorithm : sort;
+        import std.format : format;
+
+        struct Point {
+            int x, y;
+
+            int opCmp(const Point other) const {
+                return (x * x + y * y) - (other.x * other.x + other.y * other.y);
+            }
+
+            string toString() const {
+                return format("(%s,%s)", x, y);
+            }
+        }
+
+        auto arr = [
+            Nullable!Point(Point(3, 4)), // distance = 25
+            Nullable!Point(),           // null
+            Nullable!Point(Point(1, 1)) // distance = 2
+        ];
+
+        sort(arr);
+        assert(arr[0].isNull);
+        assert(arr[1].get == Point(1, 1));
+        assert(arr[2].get == Point(3, 4));
+    }
+
     /**
      * Constructor initializing `this` with `value`.
      *
